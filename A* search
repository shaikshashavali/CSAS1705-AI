import heapq

class AStarNode:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from start node to current node
        self.h = h  # Heuristic estimate from current node to goal node

    def __lt__(self, other):
        # Comparison method for priority queue
        return (self.g + self.h) < (other.g + other.h)

class AStarAlgorithm:
    def __init__(self, start, goal, grid, heuristic):
        self.start = start
        self.goal = goal
        self.grid = grid
        self.heuristic = heuristic

    def is_valid_move(self, row, col):
        return 0 <= row < len(self.grid) and 0 <= col < len(self.grid[0]) and self.grid[row][col] != '#'

    def get_neighbors(self, node):
        row, col = node.state
        neighbors = [(row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]
        return [(r, c) for r, c in neighbors if self.is_valid_move(r, c)]

    def calculate_heuristic(self, state):
        return self.heuristic(state, self.goal)

    def a_star_search(self):
        start_node = AStarNode(self.start, g=0, h=self.calculate_heuristic(self.start))
        open_set = [start_node]
        closed_set = set()

        while open_set:
            current_node = heapq.heappop(open_set)

            if current_node.state == self.goal:
                path = self.construct_path(current_node)
                return path

            closed_set.add(current_node.state)

            for neighbor_state in self.get_neighbors(current_node):
                if neighbor_state in closed_set:
                    continue

                neighbor_g = current_node.g + 1
                neighbor_h = self.calculate_heuristic(neighbor_state)
                neighbor_node = AStarNode(neighbor_state, parent=current_node, g=neighbor_g, h=neighbor_h)

                if neighbor_node not in open_set:
                    heapq.heappush(open_set, neighbor_node)

        return None  # No path found

    def construct_path(self, node):
        path = []
        while node:
            path.insert(0, node.state)
            node = node.parent
        return path

def manhattan_distance(state1, state2):
    return abs(state1[0] - state2[0]) + abs(state1[1] - state2[1])

if __name__ == "__main__":
    # Example usage
    start_state = (0, 0)
    goal_state = (4, 4)
    obstacle_grid = [
        ['.', '.', '.', '.', '.'],
        ['.', '#', '.', '#', '.'],
        ['.', '#', '.', '#', '.'],
        ['.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.']
    ]

    a_star = AStarAlgorithm(start_state, goal_state, obstacle_grid, heuristic=manhattan_distance)
    path = a_star.a_star_search()

    if path:
        print("Path found:")
        for row, col in path:
            print(f"({row}, {col})")
    else:
        print("No path found.")
